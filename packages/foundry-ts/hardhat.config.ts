// import fs from "fs";
// import "@nomiclabs/hardhat-waffle";
// import "@typechain/hardhat";
// import "hardhat-preprocessor";
// import { HardhatUserConfig, task } from "hardhat/config";

// import example from "./tasks/example";

// function getRemappings() {
//   return fs
//     .readFileSync("remappings.txt", "utf8")
//     .split("\n")
//     .filter(Boolean)
//     .map((line) => line.trim().split("="));
// }

// task("example", "Example task").setAction(example);

// const config: HardhatUserConfig = {
//   solidity: {
//     version: "0.8.13",
//     settings: {
//       optimizer: {
//         enabled: true,
//         runs: 200,
//       },
//     },
//   },
//   paths: {
//     sources: "./src", // Use ./src rather than ./contracts as Hardhat expects
//     cache: "./cache_hardhat", // Use a different cache for Hardhat than Foundry
//   },
//   // This fully resolves paths for imports in the ./lib directory for Hardhat
//   preprocess: {
//     eachLine: (hre) => ({
//       transform: (line: string) => {
//         if (line.match(/^\s*import /i)) {
//           getRemappings().forEach(([find, replace]) => {
//             if (line.match('"' + find)) {
//               line = line.replace('"' + find, '"' + replace);
//             }
//           });
//         }
//         return line;
//       },
//     }),
//   },
// };

// export default config;

// tsconfig.json
// {
//   "compilerOptions": {
//     "target": "es2018",
//     "module": "commonjs",
//     "strict": true,
//     "esModuleInterop": true,
//     "outDir": "dist",
//     "declaration": true,
//     "resolveJsonModule": true
//   },
//   "include": ["./tasks", "./test", "./typechain-types"],
//   "files": ["./hardhat.config.ts"]
// }

import fs from "fs";
// This adds support for typescript paths mappings
import "tsconfig-paths/register";

import "./helpers/hardhat-imports";

import path from "path";
import { hardhatNamedAccounts } from "@scaffold-eth/common/src/constants";
import { getNetworks } from "@scaffold-eth/common/src/functions";
import { config as envConfig } from "dotenv";
import glob from "glob";
import { removeConsoleLog } from "hardhat-preprocessor";
import { HardhatUserConfig } from "hardhat/config";

import { getMnemonic } from "./tasks/functions/mnemonic";

/**
 * ⛳️⛳️⛳️⛳️⛳️⛳️⛳️⛳️⛳️⛳️
 * NOTES:
 * - All the task are located in the tasks folder
 * - network definitions are in getNetworks in the '@scaffold-eth/common/src workspace: `'@scaffold-eth/common/src/functions`
 * - Named hardhat accounts are in the '@scaffold-eth/common/src workspace: `'@scaffold-eth/common/src/constants`
 * - Files generated by hardhat will be outputted to the ./generated folder
 */

// this loads the .env file into process.env
envConfig({ path: "../next-ts/.env" });

/**
 * this loads all the tasks from the tasks folder
 */
if (process.env.BUILDING !== "true") {
    glob.sync("./tasks/**/*.ts").forEach((file: string) => {
        require(path.resolve(file));
    });
}

/**
 * Set your target network!!!
 */
console.log("HARDHAT_TARGET_NETWORK: ", process.env.HARDHAT_TARGET_NETWORK);

function getRemappings() {
    return fs
        .readFileSync("remappings.txt", "utf8")
        .split("\n")
        .filter(Boolean)
        .map((line) => line.trim().split("="));
}

/**
 * loads network list and config from '@scaffold-eth/common/src
 */
const networks = {
    ...getNetworks({
        accounts: {
            mnemonic: getMnemonic(),
        },
    }),
    localhost: {
        url: "http://localhost:8545",
    },
};

/**
 * See {@link hardhatNamedAccounts} to define named accounts
 */
const namedAccounts = hardhatNamedAccounts as {
    [name: string]: string | number | { [network: string]: null | number | string };
};

export const config: HardhatUserConfig = {
    preprocess: {
        // eachLine: removeConsoleLog((hre) => hre.network.name !== "hardhat" && hre.network.name !== "localhost"),
        eachLine: (hre) => ({
            transform: (line: string) => {
                if (line.match(/^\s*import /i)) {
                    getRemappings().forEach(([find, replace]) => {
                        if (line.match('"' + find)) {
                            line = line.replace('"' + find, '"' + replace);
                        }
                    });
                }
                return line;
            },
        }),
    },
    defaultNetwork: process.env.HARDHAT_TARGET_NETWORK,
    namedAccounts: namedAccounts,
    networks: networks,
    solidity: {
        compilers: [
            {
                version: "0.8.10",
                settings: {
                    optimizer: {
                        enabled: true,
                        runs: 250,
                    },
                    outputSelection: {
                        "*": {
                            "*": ["storageLayout"],
                        },
                    },
                },
            },
        ],
    },
    mocha: {
        bail: false,
        allowUncaught: false,
        require: ["ts-node/register"],
        timeout: 30000,
        slow: 9900,
        reporter: process.env.GITHUB_ACTIONS === "true" ? "mocha-junit-reporter" : "spec",
        reporterOptions: {
            mochaFile: "testresult.xml",
            toConsole: true,
        },
    },
    watcher: {
        "auto-compile": {
            tasks: ["compile"],
            files: ["./contracts"],
            verbose: false,
        },
        test: {
            tasks: [{ command: "test", params: { testFiles: ["{path}"] } }],
            files: ["./test/**/*"],
            verbose: true,
        },
    },
    gasReporter: {
        coinmarketcap: process.env.COINMARKETCAP_API_KEY,
        currency: "USD",
    },
    dodoc: {
        runOnCompile: false,
        debugMode: false,
        keepFileStructure: true,
        freshOutput: true,
        outputDir: "./generated/docs",
        include: ["contracts"],
    },
    paths: {
        cache: "./generated/cache",
        artifacts: "./generated/artifacts",
        deployments: "./generated/deployments",
        sources: "./src", // Use ./src rather than ./contracts as Hardhat expects
    },
    typechain: {
        outDir: "./generated/contract-types",
    },
};
export default config;
